import UIKit
import PlaygroundSupport

// MARK: - Protocolo Mediator
protocol AuthMediator: AnyObject {
    func notify(sender: UIControl, event: String)
}

// MARK: - Componentes personalizados
class AuthTextField: UITextField {
    weak var mediator: AuthMediator?
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        borderStyle = .roundedRect
        addTarget(self, action: #selector(textChanged), for: .editingChanged)
    }
    
    required init?(coder: NSCoder) { fatalError("init(coder:) has not been implemented") }
    
    @objc private func textChanged() {
        mediator?.notify(sender: self, event: "textChanged")
    }
}

class AuthButton: UIButton {
    weak var mediator: AuthMediator?
    
    init(title: String) {
        super.init(frame: .zero)
        setTitle(title, for: .normal)
        backgroundColor = .systemBlue
        layer.cornerRadius = 8
        addTarget(self, action: #selector(tapped), for: .touchUpInside)
    }
    
    required init?(coder: NSCoder) { fatalError("init(coder:) has not been implemented") }
    
    @objc private func tapped() {
        mediator?.notify(sender: self, event: "tapped")
    }
}

// MARK: - Mediator concreto
class AuthDialogMediator: AuthMediator {
    private let usernameField: AuthTextField
    private let passwordField: AuthTextField
    private let loginButton: AuthButton
    private let resetButton: AuthButton
    private let statusLabel: UILabel
    
    init(username: AuthTextField, password: AuthTextField, login: AuthButton, reset: AuthButton, status: UILabel) {
        self.usernameField = username
        self.passwordField = password
        self.loginButton = login
        self.resetButton = reset
        self.statusLabel = status
        
        username.mediator = self
        password.mediator = self
        login.mediator = self
        reset.mediator = self
        
        updateLoginState()
    }
    
    func notify(sender: UIControl, event: String) {
        switch (sender, event) {
        case (is AuthTextField, "textChanged"):
            updateLoginState()
            
        case (loginButton, "tapped"):
            if usernameField.text == "admin" && passwordField.text == "1234" {
                statusLabel.text = "✅ Login correcto"
                statusLabel.textColor = .systemGreen
            } else {
                statusLabel.text = "❌ Usuario o contraseña incorrectos"
                statusLabel.textColor = .systemRed
            }
            
        case (resetButton, "tapped"):
            usernameField.text = ""
            passwordField.text = ""
            statusLabel.text = ""
            updateLoginState()
            
        default: break
        }
    }
    
    private func updateLoginState() {
        let enabled = !(usernameField.text?.isEmpty ?? true) &&
                      !(passwordField.text?.isEmpty ?? true)
        loginButton.isEnabled = enabled
        loginButton.alpha = enabled ? 1.0 : 0.5
    }
}

// MARK: - UI Setup para Playground
let view = UIView(frame: CGRect(x: 0, y: 0, width: 300, height: 250))
view.backgroundColor = .white

let usernameField = AuthTextField(frame: CGRect(x: 20, y: 20, width: 260, height: 40))
usernameField.placeholder = "Usuario"

let passwordField = AuthTextField(frame: CGRect(x: 20, y: 70, width: 260, height: 40))
passwordField.placeholder = "Contraseña"
passwordField.isSecureTextEntry = true

let loginButton = AuthButton(title: "Login")
loginButton.frame = CGRect(x: 20, y: 120, width: 120, height: 40)

let resetButton = AuthButton(title: "Reset")
resetButton.backgroundColor = .systemGray
resetButton.frame = CGRect(x: 160, y: 120, width: 120, height: 40)

let statusLabel = UILabel(frame: CGRect(x: 20, y: 180, width: 260, height: 40))
statusLabel.textAlignment = .center

// Instanciamos el Mediator
let mediator = AuthDialogMediator(
    username: usernameField,
    password: passwordField,
    login: loginButton,
    reset: resetButton,
    status: statusLabel
)

view.addSubview(usernameField)
view.addSubview(passwordField)
view.addSubview(loginButton)
view.addSubview(resetButton)
view.addSubview(statusLabel)

PlaygroundPage.current.liveView = view
